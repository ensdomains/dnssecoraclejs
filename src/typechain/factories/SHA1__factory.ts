/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SHA1 } from "../SHA1";

export class SHA1__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SHA1> {
    return super.deploy(overrides || {}) as Promise<SHA1>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SHA1 {
    return super.attach(address) as SHA1;
  }
  connect(signer: Signer): SHA1__factory {
    return super.connect(signer) as SHA1__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SHA1 {
    return new Contract(address, _abi, signerOrProvider) as SHA1;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "x",
        type: "bytes32",
      },
    ],
    name: "Debug",
    type: "event",
  },
];

const _bytecode =
  "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099f1d2a1435aede1991b436fdf4f8015f0227f6ec3689db1c94d1d6917207e8964736f6c63430007040033";
