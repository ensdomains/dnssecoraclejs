/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DNSSECImplInterface extends ethers.utils.Interface {
  functions: {
    "algorithms(uint8)": FunctionFragment;
    "anchors()": FunctionFragment;
    "deleteRRSet(uint16,bytes,tuple,bytes)": FunctionFragment;
    "deleteRRSetNSEC3(uint16,bytes,tuple,tuple,bytes)": FunctionFragment;
    "digests(uint8)": FunctionFragment;
    "nsec3Digests(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "rrdata(uint16,bytes)": FunctionFragment;
    "setAlgorithm(uint8,address)": FunctionFragment;
    "setDigest(uint8,address)": FunctionFragment;
    "setNSEC3Digest(uint8,address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "submitRRSet(tuple,bytes)": FunctionFragment;
    "submitRRSets(bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "algorithms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "anchors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteRRSet",
    values: [
      BigNumberish,
      BytesLike,
      { rrset: BytesLike; sig: BytesLike },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRRSetNSEC3",
    values: [
      BigNumberish,
      BytesLike,
      { rrset: BytesLike; sig: BytesLike },
      { rrset: BytesLike; sig: BytesLike },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "digests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nsec3Digests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rrdata",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAlgorithm",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDigest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNSEC3Digest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitRRSet",
    values: [{ rrset: BytesLike; sig: BytesLike }, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRRSets",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "algorithms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteRRSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRRSetNSEC3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "digests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nsec3Digests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rrdata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAlgorithm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDigest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNSEC3Digest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitRRSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRRSets",
    data: BytesLike
  ): Result;

  events: {
    "AlgorithmUpdated(uint8,address)": EventFragment;
    "DigestUpdated(uint8,address)": EventFragment;
    "Marker()": EventFragment;
    "NSEC3DigestUpdated(uint8,address)": EventFragment;
    "RRSetUpdated(bytes,bytes)": EventFragment;
    "Test(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AlgorithmUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DigestUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Marker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NSEC3DigestUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RRSetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Test"): EventFragment;
}

export class DNSSECImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DNSSECImplInterface;

  functions: {
    algorithms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "algorithms(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    anchors(overrides?: CallOverrides): Promise<[string]>;

    "anchors()"(overrides?: CallOverrides): Promise<[string]>;

    deleteRRSet(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteRRSet(uint16,bytes,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteRRSetNSEC3(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteRRSetNSEC3(uint16,bytes,tuple,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    digests(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nsec3Digests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "nsec3Digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rrdata(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, string]>;

    "rrdata(uint16,bytes)"(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, string]>;

    setAlgorithm(
      id: BigNumberish,
      algo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAlgorithm(uint8,address)"(
      id: BigNumberish,
      algo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDigest(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDigest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNSEC3Digest(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNSEC3Digest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitRRSet(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitRRSet(tuple,bytes)"(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitRRSets(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitRRSets(bytes,bytes)"(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  algorithms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "algorithms(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  anchors(overrides?: CallOverrides): Promise<string>;

  "anchors()"(overrides?: CallOverrides): Promise<string>;

  deleteRRSet(
    deleteType: BigNumberish,
    deleteName: BytesLike,
    nsec: { rrset: BytesLike; sig: BytesLike },
    proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteRRSet(uint16,bytes,tuple,bytes)"(
    deleteType: BigNumberish,
    deleteName: BytesLike,
    nsec: { rrset: BytesLike; sig: BytesLike },
    proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteRRSetNSEC3(
    deleteType: BigNumberish,
    deleteName: BytesLike,
    closestEncloser: { rrset: BytesLike; sig: BytesLike },
    nextClosest: { rrset: BytesLike; sig: BytesLike },
    dnskey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteRRSetNSEC3(uint16,bytes,tuple,tuple,bytes)"(
    deleteType: BigNumberish,
    deleteName: BytesLike,
    closestEncloser: { rrset: BytesLike; sig: BytesLike },
    nextClosest: { rrset: BytesLike; sig: BytesLike },
    dnskey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  digests(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "digests(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nsec3Digests(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "nsec3Digests(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rrdata(
    dnstype: BigNumberish,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, string]>;

  "rrdata(uint16,bytes)"(
    dnstype: BigNumberish,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, string]>;

  setAlgorithm(
    id: BigNumberish,
    algo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAlgorithm(uint8,address)"(
    id: BigNumberish,
    algo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDigest(
    id: BigNumberish,
    digest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDigest(uint8,address)"(
    id: BigNumberish,
    digest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNSEC3Digest(
    id: BigNumberish,
    digest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNSEC3Digest(uint8,address)"(
    id: BigNumberish,
    digest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitRRSet(
    input: { rrset: BytesLike; sig: BytesLike },
    proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitRRSet(tuple,bytes)"(
    input: { rrset: BytesLike; sig: BytesLike },
    proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitRRSets(
    data: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitRRSets(bytes,bytes)"(
    data: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    algorithms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "algorithms(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    anchors(overrides?: CallOverrides): Promise<string>;

    "anchors()"(overrides?: CallOverrides): Promise<string>;

    deleteRRSet(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteRRSet(uint16,bytes,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteRRSetNSEC3(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteRRSetNSEC3(uint16,bytes,tuple,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    digests(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nsec3Digests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "nsec3Digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rrdata(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, string]>;

    "rrdata(uint16,bytes)"(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, string]>;

    setAlgorithm(
      id: BigNumberish,
      algo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAlgorithm(uint8,address)"(
      id: BigNumberish,
      algo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDigest(
      id: BigNumberish,
      digest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDigest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNSEC3Digest(
      id: BigNumberish,
      digest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNSEC3Digest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitRRSet(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "submitRRSet(tuple,bytes)"(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    submitRRSets(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "submitRRSets(bytes,bytes)"(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    AlgorithmUpdated(id: null, addr: null): EventFilter;

    DigestUpdated(id: null, addr: null): EventFilter;

    Marker(): EventFilter;

    NSEC3DigestUpdated(id: null, addr: null): EventFilter;

    RRSetUpdated(name: null, rrset: null): EventFilter;

    Test(t: null): EventFilter;
  };

  estimateGas: {
    algorithms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "algorithms(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anchors(overrides?: CallOverrides): Promise<BigNumber>;

    "anchors()"(overrides?: CallOverrides): Promise<BigNumber>;

    deleteRRSet(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteRRSet(uint16,bytes,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteRRSetNSEC3(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteRRSetNSEC3(uint16,bytes,tuple,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    digests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nsec3Digests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nsec3Digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rrdata(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rrdata(uint16,bytes)"(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAlgorithm(
      id: BigNumberish,
      algo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAlgorithm(uint8,address)"(
      id: BigNumberish,
      algo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDigest(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDigest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNSEC3Digest(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNSEC3Digest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitRRSet(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitRRSet(tuple,bytes)"(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitRRSets(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitRRSets(bytes,bytes)"(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    algorithms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "algorithms(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anchors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anchors()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteRRSet(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteRRSet(uint16,bytes,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      nsec: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteRRSetNSEC3(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteRRSetNSEC3(uint16,bytes,tuple,tuple,bytes)"(
      deleteType: BigNumberish,
      deleteName: BytesLike,
      closestEncloser: { rrset: BytesLike; sig: BytesLike },
      nextClosest: { rrset: BytesLike; sig: BytesLike },
      dnskey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    digests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nsec3Digests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nsec3Digests(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rrdata(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rrdata(uint16,bytes)"(
      dnstype: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAlgorithm(
      id: BigNumberish,
      algo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAlgorithm(uint8,address)"(
      id: BigNumberish,
      algo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDigest(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDigest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNSEC3Digest(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNSEC3Digest(uint8,address)"(
      id: BigNumberish,
      digest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitRRSet(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitRRSet(tuple,bytes)"(
      input: { rrset: BytesLike; sig: BytesLike },
      proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitRRSets(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitRRSets(bytes,bytes)"(
      data: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
