/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EllipticCurveInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,uint256,uint256,uint256)": FunctionFragment;
    "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)": FunctionFragment;
    "addProj(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isOnCurve(uint256,uint256)": FunctionFragment;
    "isZeroCurve(uint256,uint256)": FunctionFragment;
    "multipleGeneratorByScalar(uint256)": FunctionFragment;
    "multiplyPowerBase2(uint256,uint256,uint256)": FunctionFragment;
    "multiplyScalar(uint256,uint256,uint256)": FunctionFragment;
    "toAffinePoint(uint256,uint256,uint256)": FunctionFragment;
    "toProjectivePoint(uint256,uint256)": FunctionFragment;
    "twice(uint256,uint256)": FunctionFragment;
    "twiceProj(uint256,uint256,uint256)": FunctionFragment;
    "validateSignature(bytes32,uint256[2],uint256[2])": FunctionFragment;
    "zeroAffine()": FunctionFragment;
    "zeroProj()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAndReturnProjectivePoint",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addProj",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnCurve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isZeroCurve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multipleGeneratorByScalar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplyPowerBase2",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplyScalar",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toAffinePoint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toProjectivePoint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twiceProj",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [
      BytesLike,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroAffine",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zeroProj", values?: undefined): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAndReturnProjectivePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProj", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnCurve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isZeroCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multipleGeneratorByScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplyPowerBase2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplyScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toAffinePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toProjectivePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "twiceProj", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroAffine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeroProj", data: BytesLike): Result;

  events: {};
}

export class EllipticCurve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EllipticCurveInterface;

  functions: {
    add(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "add(uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    addAndReturnProjectivePoint(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber]] & {
        P: [BigNumber, BigNumber, BigNumber];
      }
    >;

    "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)"(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber]] & {
        P: [BigNumber, BigNumber, BigNumber];
      }
    >;

    addProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x2: BigNumber;
        y2: BigNumber;
        z2: BigNumber;
      }
    >;

    "addProj(uint256,uint256,uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x2: BigNumber;
        y2: BigNumber;
        z2: BigNumber;
      }
    >;

    isOnCurve(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOnCurve(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isZeroCurve(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isZero: boolean }>;

    "isZeroCurve(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isZero: boolean }>;

    multipleGeneratorByScalar(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "multipleGeneratorByScalar(uint256)"(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    multiplyPowerBase2(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "multiplyPowerBase2(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    multiplyScalar(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    "multiplyScalar(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    toAffinePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    "toAffinePoint(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    toProjectivePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber]] & {
        P: [BigNumber, BigNumber, BigNumber];
      }
    >;

    "toProjectivePoint(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber]] & {
        P: [BigNumber, BigNumber, BigNumber];
      }
    >;

    twice(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "twice(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    twiceProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x1: BigNumber;
        y1: BigNumber;
        z1: BigNumber;
      }
    >;

    "twiceProj(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x1: BigNumber;
        y1: BigNumber;
        z1: BigNumber;
      }
    >;

    validateSignature(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validateSignature(bytes32,uint256[2],uint256[2])"(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    zeroAffine(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    "zeroAffine()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    zeroProj(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x: BigNumber;
        y: BigNumber;
        z: BigNumber;
      }
    >;

    "zeroProj()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x: BigNumber;
        y: BigNumber;
        z: BigNumber;
      }
    >;
  };

  add(
    x0: BigNumberish,
    y0: BigNumberish,
    x1: BigNumberish,
    y1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "add(uint256,uint256,uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    x1: BigNumberish,
    y1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  addAndReturnProjectivePoint(
    x1: BigNumberish,
    y1: BigNumberish,
    x2: BigNumberish,
    y2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)"(
    x1: BigNumberish,
    y1: BigNumberish,
    x2: BigNumberish,
    y2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  addProj(
    x0: BigNumberish,
    y0: BigNumberish,
    z0: BigNumberish,
    x1: BigNumberish,
    y1: BigNumberish,
    z1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x2: BigNumber;
      y2: BigNumber;
      z2: BigNumber;
    }
  >;

  "addProj(uint256,uint256,uint256,uint256,uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    z0: BigNumberish,
    x1: BigNumberish,
    y1: BigNumberish,
    z1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x2: BigNumber;
      y2: BigNumber;
      z2: BigNumber;
    }
  >;

  isOnCurve(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOnCurve(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isZeroCurve(
    x0: BigNumberish,
    y0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isZeroCurve(uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multipleGeneratorByScalar(
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "multipleGeneratorByScalar(uint256)"(
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  multiplyPowerBase2(
    x0: BigNumberish,
    y0: BigNumberish,
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "multiplyPowerBase2(uint256,uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  multiplyScalar(
    x0: BigNumberish,
    y0: BigNumberish,
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

  "multiplyScalar(uint256,uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

  toAffinePoint(
    x0: BigNumberish,
    y0: BigNumberish,
    z0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

  "toAffinePoint(uint256,uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    z0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

  toProjectivePoint(
    x0: BigNumberish,
    y0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "toProjectivePoint(uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  twice(
    x0: BigNumberish,
    y0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "twice(uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  twiceProj(
    x0: BigNumberish,
    y0: BigNumberish,
    z0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x1: BigNumber;
      y1: BigNumber;
      z1: BigNumber;
    }
  >;

  "twiceProj(uint256,uint256,uint256)"(
    x0: BigNumberish,
    y0: BigNumberish,
    z0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x1: BigNumber;
      y1: BigNumber;
      z1: BigNumber;
    }
  >;

  validateSignature(
    message: BytesLike,
    rs: [BigNumberish, BigNumberish],
    Q: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "validateSignature(bytes32,uint256[2],uint256[2])"(
    message: BytesLike,
    rs: [BigNumberish, BigNumberish],
    Q: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<boolean>;

  zeroAffine(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

  "zeroAffine()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

  zeroProj(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x: BigNumber;
      y: BigNumber;
      z: BigNumber;
    }
  >;

  "zeroProj()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x: BigNumber;
      y: BigNumber;
      z: BigNumber;
    }
  >;

  callStatic: {
    add(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "add(uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    addAndReturnProjectivePoint(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)"(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    addProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x2: BigNumber;
        y2: BigNumber;
        z2: BigNumber;
      }
    >;

    "addProj(uint256,uint256,uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x2: BigNumber;
        y2: BigNumber;
        z2: BigNumber;
      }
    >;

    isOnCurve(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOnCurve(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isZeroCurve(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isZeroCurve(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multipleGeneratorByScalar(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "multipleGeneratorByScalar(uint256)"(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    multiplyPowerBase2(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "multiplyPowerBase2(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    multiplyScalar(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    "multiplyScalar(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    toAffinePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    "toAffinePoint(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x1: BigNumber; y1: BigNumber }>;

    toProjectivePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "toProjectivePoint(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    twice(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "twice(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    twiceProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x1: BigNumber;
        y1: BigNumber;
        z1: BigNumber;
      }
    >;

    "twiceProj(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x1: BigNumber;
        y1: BigNumber;
        z1: BigNumber;
      }
    >;

    validateSignature(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "validateSignature(bytes32,uint256[2],uint256[2])"(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<boolean>;

    zeroAffine(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    "zeroAffine()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    zeroProj(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x: BigNumber;
        y: BigNumber;
        z: BigNumber;
      }
    >;

    "zeroProj()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x: BigNumber;
        y: BigNumber;
        z: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    add(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add(uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAndReturnProjectivePoint(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)"(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addProj(uint256,uint256,uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOnCurve(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOnCurve(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isZeroCurve(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isZeroCurve(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipleGeneratorByScalar(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multipleGeneratorByScalar(uint256)"(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplyPowerBase2(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multiplyPowerBase2(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplyScalar(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multiplyScalar(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAffinePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toAffinePoint(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toProjectivePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toProjectivePoint(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    twice(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "twice(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    twiceProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "twiceProj(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSignature(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateSignature(bytes32,uint256[2],uint256[2])"(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroAffine(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroAffine()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroProj(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroProj()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAndReturnProjectivePoint(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)"(
      x1: BigNumberish,
      y1: BigNumberish,
      x2: BigNumberish,
      y2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addProj(uint256,uint256,uint256,uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      x1: BigNumberish,
      y1: BigNumberish,
      z1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOnCurve(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOnCurve(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isZeroCurve(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isZeroCurve(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multipleGeneratorByScalar(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "multipleGeneratorByScalar(uint256)"(
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplyPowerBase2(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "multiplyPowerBase2(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplyScalar(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "multiplyScalar(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAffinePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toAffinePoint(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toProjectivePoint(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toProjectivePoint(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    twice(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "twice(uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    twiceProj(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "twiceProj(uint256,uint256,uint256)"(
      x0: BigNumberish,
      y0: BigNumberish,
      z0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSignature(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateSignature(bytes32,uint256[2],uint256[2])"(
      message: BytesLike,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zeroAffine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zeroAffine()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroProj(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zeroProj()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
